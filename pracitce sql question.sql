--- Write a query using a CTE to retrieve the distinct list of actor names and the number of films they acted in from the actor and film_actor table

with countdistinctactor as(
select a.actor_id ,count(film_id) no_of_films,a.first_name from actor a join film_actor fa on a.actor_id=fa.actor_id
group by a.actor_id, a.first_name order by no_of_films )
select actor_id,no_of_films, first_name from countdistinctactor;

--- 


--- Use a recursive CTE to generate a hierarchical list of categories and their subcategories from the category categorytable in Sakilaa

select * from category;


--- Create a CTE that combines information from the film and language tables to display the film title, language name, and rental rate.

with information as (
select  f.title, l.name  language_name,f.rental_rate from film as f 
join language l on f.language_id=l.language_id 
)
select inf.title,inf.language_name,inf.rental_rate from information  as inf order by inf.rental_rate ;

--- Write a query using a CTE to find the total revenue generated by each customer (sum of payments) from the customer and payment tables

with totalrevenue as(
select c.customer_id,c.first_name,sum(p.amount) total_amount from customer c 
join payment p on c.customer_id=p.customer_id group by customer_id )
select customer_id,first_name,total_amount from  totalrevenue order by total_amount desc;

--- Utilize a CTE with a window function to rank films based on their rental duration from the table

with rankoffilms as(
select title, rental_duration,rank() over(order by rental_duration) rank_of_rental_durtion from film)
select title,rental_duration,rank_of_rental_durtion from rankoffilms;

--- Write a query using a CTE to find the total number of rentals made each month, considering the rental_date from the rental table

select * from rental;
with total_no_of_rental as (
select count(rental_id) as total_rental ,date_format(rental_date, '%m') rental_month from rental group by rental_month
)
select total_rental ,rental_month from total_no_of_rental group by rental_month;


--- Create a CTE to list customers who have made more than two rentals, and then join this CTE with the customer table to retrieve additional customer 

with additional_customer as (
select customer_id from rental group by customer_id having count(*) >2)
select c.*  from customer c  join additional_customer ad on c.customer_id=ad.customer_id;


--- Use a CTE to pivot the data from the payment table to display the total payments made by each customer in
--- separate columns for different payment methods


select * from payment;
with totalpayments as(
select sum(amount) total_amount ,customer_id from payment group by customer_id)
select customer_id,total_amount from totalpayments order by total_amount desc ;

--- Create a CTE to generate a report showing pairs of actors who have appeared in the same film together,using film_actor  the table.

select * from film_actor;
select * from film;

with pair_of_actor as (
select count(fa.actor_id) as totalactor ,f.film_id,f.title from film_actor fa join film f on fa.film_id=f.film_id where fa.film_id=f.film_id group by film_id)
select totalactor,pa.film_id,title from pair_of_actor pa group by film_id ;


--- Implement a recursive CTE to find all employees in the staff table who report to a specific manager,
--- considering the report_to column.

select * from staff;
select * from store;

with report_column as (
select s.staff_id,st.store_id,st.manager_staff_id from store st join staff s on st.store_id=s.store_id  )
select staff_id,store_id,manager_staff_id as manager_id from report_column ;




--- Identify a table in the Sakila database that violates 1NFb Explain how you would normalize it to achieve 1NF

select * from actor_award;
select actor_award_id,actor_id,first_name, last_name,awards from actor_award where awards = 'Emmy';
select actor_award_id,actor_id,first_name,last_name,awards from actor_award where awards =  'Oscar' ;
select actor_award_id,actor_id,first_name,last_name,awards from actor_award where awards =  'Tony' ;



--- Choose a table in Sakila and describe how you would determine whether it is in 2NFb If 
--- it violates 2NF,explain the steps to normalize it.

select * from film;
select film_id,rating, special_features from film where special_features = 'trailers' ;
select film_id,rating, special_features from film where special_features = 'deleted scenes' ;
select film_id,rating, special_features from film where special_features = 'behind the scenes' ;
select film_id,rating, special_features from film where special_features = 'commentaries' ;

--- Identify a table in Sakila that violates 3NFb Describe the transitive dependencies present and outline the steps to 
--- Normalize the table to 3NF

select * from actor_award;
select * from address;
select * from city;
select * from customer;
 select * from film;
select * from film_actor;
